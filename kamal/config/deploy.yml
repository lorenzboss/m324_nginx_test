# yaml-language-server: $schema=https://json.schemastore.org/yamllint.json
# Name der Applikation
# WARNING: muss gleich sein zum Label "service" des zu deployende Dockerfile
#          siehe: `../../app/Dockerfile`
service: myapp

# Name vom Container-Image
image: m324/myapp

# Auf diesen Server deployen
# INFO: Wir verwenden die öffentliche IP der AWS-VM via CI-Pipeline
servers:
  web:
    hosts:
      - <%= ENV.fetch('KAMAL_SERVER_IP') %>

# Anmeldeinfos für die Docker Registry. Bei uns ein aws_ecr_repository
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: <%= ENV.fetch('KAMAL_REGISTRY') || 'not-defined' %>
  username: AWS

  # Always use an access token rather than real password when possible.
  password: <%= ENV.fetch('KAMAL_REGISTRY_PASSWORD') || 'not-defined' %>

ssh:
  user: ubuntu
  # keys_only: true
  # keys: ["../local/ssh/id_rsa.pem"]

proxy:
  app_port: 80
  healthcheck:
    path: /up
    interval: 2
    timeout: 2
# Seten von Environment-Variablen auf der VM
# env:
#   secret:
#     - MYSQL_USER
#     - MYSQL_PASSWORD
#     - MYSQL_DATABASE

# Use accessory services (secrets come from .env).
# INFO: Konfiguriert MYSQL auf der VM.
#       Es müssen alle Environment-Variablen als GitHub Environment-Variablen gesetzt sein.
# accessories:
#   mysql:
#     image: mysql:8.0
#     host: <%= ENV.fetch('KAMAL_SERVER_IP') %>
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: "%"
#       secret:
#         - MYSQL_ROOT_PASSWORD
#         - MYSQL_USER
#         - MYSQL_PASSWORD
#         - MYSQL_DATABASE
#     directories:
#       - data:/var/lib/mysql

builder:
  arch: amd64
# INFO: Nicht verwendet im Modul, wir builden direkt in der Github Action
# Configure builder setup.
#   context: ../app
#   dockerfile: ../app/Dockerfile
#   args:
#     RUBY_VERSION: 3.4.2
#   secrets:
#     - GITHUB_TOKEN
# remote: ssh://app@192.168.0.1
